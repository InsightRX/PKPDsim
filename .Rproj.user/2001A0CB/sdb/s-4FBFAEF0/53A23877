{
    "contents" : "#' Simulate ODE\n#'\n#' Simulates a specified ODE system and regimen\n#' @param ode function describing the ODE system\n#' @param parameters\n#' @param omega vector describing the lower-diagonal of the between-subject variability matrix\n#' @param omega_type exponential or normal\n#' @param n_ind number of individuals to simulate\n#' @param regimen a regimen object created using the regimen() function\n#' @param A_init vector with the initial state of the ODE system\n#' @param step_size the step size between the observations (NOT the step size of the differential equation solver)\n#' @param tmax maximum simulation time, if not specified will pick the end of the regimen as maximum\n#' @param output vector specifying which compartment numbers to output\n#' @return a list containing calculated VPC information, and a ggplot2 object\n#' @export\n#' @seealso \\link{sim_ode_shiny}\n#' @examples\n#'\n#'library(PKPDsim)\n#'p <- list(CL = 38.48,\n#'          V  = 7.4,\n#'          Q2 = 7.844,\n#'          V2 = 5.19,\n#'          Q3 = 9.324,\n#'          V3 = 111)\n#'\n#'r1 <- regimen(amt = 100,\n#'              times = c(0, 24, 36),\n#'              type = \"infusion\")\n#'\n#'dat <- sim_ode (ode = pk_3cmt_iv,\n#'                par = p,\n#'                regimen = r1)\n#'\n#'ggplot(dat, aes(x=t, y=y)) +\n#'  geom_line() +\n#'  scale_y_log10() +\n#'  facet_wrap(~comp)\n#'\n#'# repeat with IIV:\n#'omega <- c(0.3,       # IIV CL\n#'           0.1, 0.3)  # IIV V\n#'\n#'dat <- sim_ode (ode = pk_3cmt_iv,\n#'                par = p,\n#'                omega = omega,\n#'                n_ind = 20,\n#'                regimen = r1)\n#'\n#'ggplot(dat, aes(x=t, y=y, colour=factor(id), group=id)) +\n#'  geom_line() +\n#'  scale_y_log10() +\n#'  facet_wrap(~comp)\n\nsim_ode <- function (ode = function() {},\n                     parameters = list(),\n                     omega = NULL,\n                     omega_type = \"exponential\",\n                     n_ind = 1,\n                     regimen = NULL,\n                     A_init = NULL,\n                     step_size = .25,\n                     tmax = NULL,\n                     output_cmt = NULL) {\n  num_int_wrapper <- function (times, A_init, des, p_ind) {\n    des_out <- deSolve::lsoda(A_init, times, des, p_ind)\n    dat_ind <- c()\n    for (j in 1:length(A_init)) {\n      dat_ind <- rbind (dat_ind, cbind(t=des_out[,1], comp=j, y=des_out[,(j+1)]))\n    }\n    return(data.frame(dat_ind))\n  }\n  get_size_ode <- function(ode, p) {\n    p$rate <- 1\n    dum <- ode(1, rep(1, 1000), p)\n    length(dum[[1]])\n  }\n  trans.lower <- function(x,y) { ifelse(y<x, x*(x-1)/2 + y, y*(y-1)/2 + x) }\n  full.mat <- function(p) { outer(1:p,1:p, trans.lower) }\n  if (!is.null(omega)) {\n    omega_mat <- matrix (omega[full.mat(2)], nrow=2, byrow=T)\n    require(MASS)\n    etas   <- mvrnorm(n = n_ind, mu=rep(0, 2), Sigma=omega_mat)\n    if(n_ind == 1) {\n      etas <- t(matrix(etas))\n    }\n  }\n  if(is.null(regimen)) {\n    regimen <- new_regimen()\n  }\n  comb <- list()\n  if (is.null(A_init)) {\n    A_init <- rep(0, get_size_ode(ode, parameters))\n  }\n  p <- parameters\n  if(class(regimen) != \"regimen\") {\n    stop(\"Please create a regimen using the new_regimen() function!\")\n  }\n  if(regimen$type == \"infusion\") {\n    p$t_inf <- regimen$t_inf\n    p$dose_type <- \"infusion\"\n    design <- data.frame(rbind(cbind(t=regimen$dose_times, dose = regimen$dose_amts), cbind(t=regimen$dose_times + regimen$t_inf, dose=0))) %>%\n      dplyr::arrange(t)\n  } else {\n    p$dose_type <- \"bolus\"\n    design <- data.frame(rbind(cbind(t=regimen$dose_times, dose = regimen$dose_amts)))\n  }\n  if (is.null(tmax)) {\n    tmax <- tail(design$t,1) + max(diff(regimen$dose_times))\n  }\n  design <- rbind(design %>%\n                    dplyr::filter(t < tmax), tail(design,1))\n  design[length(design[,1]), c(\"t\", \"dose\")] <- c(tmax,0)\n  times <- seq(from=0, to=tail(design$t,1), by=step_size)\n  for (i in 1:n_ind) {\n    p_i <- p\n    if (!is.null(omega)) {\n      if (omega_type==\"exponential\") {\n        p_i[1:nrow(omega_mat)] <- relist(unlist(as.relistable(p_i[1:nrow(omega_mat)])) * exp(etas[i,]))\n      } else {\n        p_i[1:nrow(omega_mat)] <- relist(unlist(as.relistable(p_i[1:nrow(omega_mat)])) + etas[i,])\n      }\n    }\n    for (k in 1:(length(design$t)-1)) {\n      if (k > 1) {\n        A_upd <- dat[dat$t==tail(time_window,1),]$y\n      } else {\n        A_upd <- A_init\n      }\n      p_i$rate <- 0\n      if(p_i$dose_type != \"infusion\") {\n        A_upd[regimen$cmt] <- A_upd[regimen$cmt] + regimen$dose_amts[k]\n      } else {\n        if(design$dose[k] > 0) {\n          p_i$rate <- design$dose[k] / p_i$t_inf\n        }\n      }\n      time_window <- times[(times >= design$t[k]) & (times <= design$t[k+1])]\n      dat <- num_int_wrapper (time_window, A_upd, ode, p_i)\n      comb <- rbind(comb, cbind(id = i, dat))\n    }\n  }\n  # Add concentration to dataset:\n  if(!is.null(attr(ode, \"obs\"))) {\n    comb <- rbind (comb, comb %>% dplyr::filter(comp == attr(ode, \"obs\")[[\"cmt\"]]) %>% dplyr::mutate(comp = \"obs\", y = y/p[[attr(ode, \"obs\")[[\"scale\"]]]]) )\n  }\n  if(!is.null(output_cmt)) {\n    comb <- comb %>% dplyr::filter(comp %in% output_cmt)\n  }\n  return(data.frame(comb))\n}\n",
    "created" : 1425787789930.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1657570559",
    "id" : "53A23877",
    "lastKnownWriteTime" : 1425928746,
    "path" : "~/git/PKPDsim/R/sim_ode.R",
    "project_path" : "R/sim_ode.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}